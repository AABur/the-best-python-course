1
00:00:33,630000 --> 00:00:35,220000
добро пожаловать на мой канал, Алекс.

2
00:00:35,220000 --> 00:00:36,520000
не мог бы ты, пожалуйста, представиться?

3
00:00:36,520000 --> 00:00:37,650000
я рад быть здесь.

4
00:00:37,910000 --> 00:00:39,580000
да, я Алекс.

5
00:00:39,580000 --> 00:00:45,820000
в настоящее время я работаю в astral-sh, где работаю над линтером ruff.

6
00:00:45,820000 --> 00:00:50,700000
а в свободное время я занимаюсь многими вещами с открытым исходным кодом в сообществе Python.

7
00:00:50,700000 --> 00:00:52,370000
так что я core-разработчик CPython.

8
00:00:52,790000 --> 00:00:54,700000
я занимаюсь сопровождением typeshed.

9
00:00:54,700000 --> 00:01:02,050000
я также поддерживаю flake-pyi, ориентированный на типизацию, и помогаю с MyPy.

10
00:01:02,350000 --> 00:01:04,970000
и я также поддерживаю typing_extensions.

11
00:01:05,190000 --> 00:01:08,210000
о, это очень, очень хороший список.

12
00:01:09,150000 --> 00:01:16,120000
я рад, что ты принял это приглашение, и я собираюсь спросить тебя о некоторых глубоких typing штуках.

13
00:01:16,120000 --> 00:01:23,450000
и я действительно хочу знать, есть ли какие-то вещи, которые мы действительно можем улучшить в тестировании typeshed?

14
00:01:23,710000 --> 00:01:28,260000
потому что прямо сейчас проводится много проверок, много заданий CI.

15
00:01:28,260000 --> 00:01:30,620000
мы проверяем в основном все, что можем.

16
00:01:30,620000 --> 00:01:31,700000
что мы можем сделать лучше?

17
00:01:31,700000 --> 00:01:32,890000
каково твое мнение?

18
00:01:34,870000 --> 00:01:36,570000
это действительно интересный вопрос.

19
00:01:37,830000 --> 00:01:48,420000
я думаю, да, у нас уже есть множество тестов, которые позволяют убедиться, что аннотации, которые у нас есть, хороши, а заглушки, которые у нас есть, соответствуют среде выполнения.

20
00:01:48,420000 --> 00:01:53,570000
я думаю, что, вероятно, единственное, что я хотел бы улучшить, - это улучшить генерацию заглушек.

21
00:01:53,630000 --> 00:02:03,850000
чтобы людям было проще просто добавлять базовые заглушки, которые имеют достойное качество, и им не нужно было бы очень усердно работать, чтобы добиться этого.

22
00:02:04,710000 --> 00:02:11,960000
у нас есть сценарии генерации заглушек, и они будут создавать очень простые заглушки, но на самом деле эти заглушки не так уж много стоят.

23
00:02:11,960000 --> 00:02:22,010000
есть простые способы сделать их еще лучше, и у нас в MyPy есть несколько участников, которые в данный момент довольно много работают над stubgen, что приятно видеть, но, я думаю, мы можем сделать гораздо больше.

24
00:02:22,670000 --> 00:02:25,810000
так вот, именно на этом я бы, наверное, сосредоточил свои усилия прямо сейчас.

25
00:02:26,310000 --> 00:02:32,460000
я также думаю, что у нас нет никакой подработки, кроме Linux, macOS или Windows.

26
00:02:32,460000 --> 00:02:35,250000
у нас здесь всего три операционные системы.

27
00:02:35,390000 --> 00:02:42,540000
и я думаю, что было бы очень хорошей идеей запустить что-то вроде Solitis или что-то в этом роде.

28
00:02:42,540000 --> 00:02:43,010000
да.

29
00:02:43,950000 --> 00:02:45,370000
да, это интересно.

30
00:02:46,350000 --> 00:02:54,100000
я не знаю, много ли людей жаловались на качество проверки типов в Solaris, например.

31
00:02:54,100000 --> 00:02:58,050000
но если это так, то я не знаю, насколько это серьезная проблема.

32
00:02:58,390000 --> 00:03:02,220000
но если это действительно проблема, то я бы определенно высказался за это.

33
00:03:02,220000 --> 00:03:06,490000
да, мне было бы интересно поговорить с ребятами из Solaris и посмотреть, что у них на уме

34
00:03:06,910000 --> 00:03:22,680000
да, я думаю, что не так много людей используют Solaris, так что у нас не так много жалоб, потому что вам нужно не только использовать Solaris и проверку типов в CPython, но и использовать для этого некоторые специфические API, чтобы вы могли видеть реальные проблемы.

35
00:03:22,680000 --> 00:03:29,410000
но да, именно в этом и заключается моя точка зрения, что я действительно хочу видеть улучшения время от времени.

36
00:03:30,030000 --> 00:03:41,810000
хорошо, я думаю, что этот вопрос на самом деле не имеет отношения к типизации, но я не могу просто пропустить его, потому что думаю, что это будет очень интересно как для моей аудитории, так и для меня самого.

37
00:03:42,310000 --> 00:03:46,890000
как тебе Rust и его система типов по сравнению с CPython?

38
00:03:47,790000 --> 00:03:49,260000
мне это очень нравится.

39
00:03:49,260000 --> 00:03:57,570000
последние несколько дней я занимался рефакторингом множества тестов, и мне очень неприятно, что приходится компилировать каждый тест, прежде чем запустить хоть один из них.

40
00:03:59,710000 --> 00:04:01,520000
эта часть мне не очень нравится.

41
00:04:01,520000 --> 00:04:11,850000
я думаю, что дело в том, что я изучал Rust относительно недавно, в декабре, и больше всего меня удивило то, что я ожидал, что она будет более строгой, чем система типов Python, во всех отношениях.

42
00:04:11,990000 --> 00:04:15,020000
на самом деле все было не так.

43
00:04:15,020000 --> 00:04:18,320000
есть некоторые вещи, которые вы можете делать в Rust и которые вы не можете сделать в Python.

44
00:04:18,320000 --> 00:04:28,560000
например, гораздо проще переопределить символ на другой тип позже в той же функции в Rust, чем в Python.

45
00:04:28,560000 --> 00:04:30,410000
MyPY, как правило, не позволяет тебе этого делать.

46
00:04:30,990000 --> 00:04:32,600000
pyright никогда не позволит тебе этого сделать.

47
00:04:32,600000 --> 00:04:35,180000
так что это застало меня врасплох.

48
00:04:35,180000 --> 00:04:45,060000
и причина этого в том, что правила определения области действия Rust таковы, что это можно безопасно сделать в Rust, в то время как в Python это невозможно.

49
00:04:45,060000 --> 00:04:48,570000
но да, мне нравится писать на Rust.

50
00:04:52,950000 --> 00:04:54,220000
это очень освежает.

51
00:04:54,220000 --> 00:04:55,930000
я думаю, это очень освежает.

52
00:04:56,110000 --> 00:05:01,960000
потому что, когда ты пишешь на Rust, ты композируешь программы, а не просто пишешь их.

53
00:05:01,960000 --> 00:05:04,360000
ты должен все тщательно продумать.

54
00:05:04,360000 --> 00:05:07,890000
ты должен подумать об управлении памятью, ты должен подумать об исключениях.

55
00:05:09,190000 --> 00:05:11,250000
я имею в виду отсутствие исключений.

56
00:05:12,230000 --> 00:05:13,280000
это очень интересно.

57
00:05:13,280000 --> 00:05:14,450000
да, я это понимаю.

59
00:05:15,340000 --> 00:05:24,850000
итак, если мы говорим о системах типов и их различиях в разных языках, что вы думаете о том, какие самые большие проблемы стоят перед системой типов Python прямо сейчас?

60
00:05:24,910000 --> 00:05:28,890000
я думаю, что мы находимся на интересном этапе разработки систем типов.

61
00:05:29,310000 --> 00:05:41,050000
за последнее время, с тех пор, как был представлен PEP 484, который был тем самым PEP, который ввел систему типов, у нас появилось много новых функций практически в каждом выпуске Python.

62
00:05:41,550000 --> 00:05:44,170000
так что это был период действительно стремительной эволюции.

63
00:05:44,430000 --> 00:05:53,420000
и прямо сейчас, за прошедший год, мы стали свидетелями создания Typing Council и создания первой версии Typing Spec.

64
00:05:53,420000 --> 00:05:56,420000
и я думаю... Не мог ли бы ты, пожалуйста, немного подробнее остановиться на этом?

65
00:05:56,420000 --> 00:06:00,330000
потому что я почти уверен, что многие люди с этим не знакомы.

66
00:06:00,510000 --> 00:06:01,450000
спасибо, да.

67
00:06:01,830000 --> 00:06:16,280000
так вот, Typing Council - это недавно созданный орган, в котором представлены несколько авторов средств проверки типов, а также несколько других людей, которые активно занимались системой типов в течение последних нескольких лет.

68
00:06:16,280000 --> 00:06:29,080000
по сути, они выступают в качестве консультативного органа при Steering Council, где Steering Council делегирует им многие решения, касающиеся PEPS.

69
00:06:29,080000 --> 00:06:35,810000
я думаю, что слово "делегировать", возможно, не совсем подходящее, потому что последнее слово остается за Steering Council, но он в значительной степени учитывает их рекомендации.

70
00:06:35,870000 --> 00:06:39,320000
так вот, была разработана новая спецификация для системы типов.

71
00:06:39,320000 --> 00:06:51,820000
таким образом, это попытка формально описать, как все правила, которые были созданы с помощью различных предложений по улучшению Python за последние несколько лет, как все они сочетаются друг с другом, как они должны работать в тандеме.

72
00:06:51,820000 --> 00:07:01,780000
и любые небольшие изменения в спецификации типов могут быть автоматически одобрены Typing Council без необходимости написания нового PEP по типам.

73
00:07:01,780000 --> 00:07:08,080000
так что это еще одна функция Typing Council, помимо предоставления отзывов о PEP по типам.

74
00:07:08,080000 --> 00:07:10,730000
я думаю, что это влияет на общее настроение в сообществе типизации.

75
00:07:10,990000 --> 00:07:25,400000
так что, по моему мнению, на данный момент я не могу говорить за всех в сообществе, но мне кажется, что общее настроение в сообществе типизации настроение прямо сейчас таково, что мы хотим немного притормозить с функциями и более формально разобраться, как именно они работают

76
00:07:25,400000 --> 00:07:30,800000
я хотел бы узнать, как существующие функции, которые у нас есть, должны работать вместе и взаимодействовать немного лучше.

77
00:07:30,800000 --> 00:07:43,450000
так вот, я думаю, что Typing Council отлично справляется со своей работой, потому что объем информации, которую им приходится собирать, согласовывать с различными средствами проверки типов и стандартизировать, просто...

78
00:07:44,150000 --> 00:07:45,250000
он очень большой.

79
00:07:45,270000 --> 00:07:50,560000
и я также хочу подчеркнуть, что они не просто создают спецификацию для этого.

80
00:07:50,560000 --> 00:07:54,690000
они также создают пакет соответствия для всех средств проверки типов.

81
00:07:54,750000 --> 00:08:02,570000
таким образом, все средства проверки типов могут иметь базовый набор функций, которые должны поддерживаться и к которым следует относиться одинаково.

82
00:08:02,910000 --> 00:08:07,220000
я думаю, что это было долгожданное дополнение к команде управления Python.

83
00:08:07,220000 --> 00:08:08,900000
я очень ценю их работу.

84
00:08:08,900000 --> 00:08:09,970000
я полностью согласен с ними.

85
00:08:10,070000 --> 00:08:13,400000
не мог бы ты, пожалуйста, рассказать немного о своей личной истории?

86
00:08:13,400000 --> 00:08:15,740000
как ты начал вносить свой вклад в typeshed?

87
00:08:15,740000 --> 00:08:26,300000
так что это может послужить хорошим примером для тех, кто только хочет начать вносить свой вклад, или просто для тех, кто не знает, что они могут внести свой вклад в typeshed прямо сейчас.

88
00:08:26,300000 --> 00:08:35,410000
если вернуться немного назад, то я изначально начал изучать типизацию в Python, потому что на самом деле я был новичком в Python и пользовался PyCharm.

89
00:08:35,710000 --> 00:08:50,740000
функция проверки типов в PyCharm была включена по умолчанию, так что я продолжал писать код и постоянно сталкивался с этими странными, раздражающими ошибками о том, как я сказал, что это был list, а теперь это dict, и PyCharm очень разозлился

90
00:08:50,740000 --> 00:08:51,040000
и ругался на меня.

91
00:08:51,040000 --> 00:08:56,600000
Так вот, я прочитал множество учебных пособий и думаю, что когда я узнаю что-то новое, мне нравится изучать это как следует.

92
00:08:56,600000 --> 00:09:03,880000
в результате этого я узнал довольно много о системе типов в Python, а затем быстро разобрался во всем

93
00:09:03,880000 --> 00:09:14,210000
ответы на вопросы о типизации в Python были действительно хорошим способом получить много баллов в Stack Overflow, потому что в Stack Overflow было множество таких вопросов.

94
00:09:14,710000 --> 00:09:18,740000
из-за этого я продолжал наращивать свой опыт в типизации Python.

95
00:09:18,740000 --> 00:09:31,320000
а потом, в конце концов, однажды я просто просматривал разделы typeshed для встроенных модулей и заметил, что множество параметров не были помечены как только-позиционные в stubs, где они были.

96
00:09:31,320000 --> 00:09:32,010000
о да.

97
00:09:32,510000 --> 00:09:33,130000
да.

98
00:09:35,230000 --> 00:09:40,580000
кстати, мы исправили все проблемы, связанные c только-позиционными параметрами?

99
00:09:40,580000 --> 00:09:43,540000
все, которые можно автоматически обнаружить.

100
00:09:43,540000 --> 00:09:43,960000
да.

101
00:09:43,960000 --> 00:09:51,340000
так что я создал PR, например, сделал некоторые параметры в некоторых методах только позиционными.

102
00:09:51,340000 --> 00:09:54,090000
и все это было сделано примерно за пять минут, я думаю.

103
00:09:54,350000 --> 00:09:56,530000
я подумал: "Вау, это было весело".

104
00:09:58,190000 --> 00:09:59,320000
давай повторим это еще раз.

105
00:09:59,320000 --> 00:10:00,680000
именно так я начал свою карьеру.

106
00:10:00,680000 --> 00:10:05,280000
я быстро понял, что работать с командой было действительно весело и что команда была невероятно гостеприимной.

107
00:10:05,280000 --> 00:10:11,060000
я многим обязан другим разработчикам typeshed, потому что это были одни из первых моих вкладов в разработку открытого исходного кода.

108
00:10:11,060000 --> 00:10:15,100000
я могу с этим полностью согласиться, потому что команда typeshed потрясающая.

109
00:10:15,100000 --> 00:10:17,130000
они очень быстро реагируют.

110
00:10:17,590000 --> 00:10:19,820000
они очень разборчивы в хорошем смысле этого слова.

111
00:10:19,820000 --> 00:10:25,200000
они находят много разных деталей и доказывают разные вещи.

112
00:10:25,200000 --> 00:10:32,280000
и я думаю, что это очень редкий пример проекта, участие в котором вызывает сильное привыкание.

113
00:10:32,280000 --> 00:10:32,730000
да.

114
00:10:32,950000 --> 00:10:34,530000
да, определенно.

115
00:10:35,070000 --> 00:10:44,490000
так что мой совет для того, чтобы начать вносить свой вклад, заключается в следующем: мы все еще добавляем заглушки для вещей, которые были добавлены или изменены в Python 3.13.

116
00:10:44,510000 --> 00:10:56,600000
Итак, у меня есть открытая проблема с typeshed, о которой я написал во время спринтов PyCon, добавляйте или изменяйте вещи, которые были добавлены или изменены в Python 3.13, в наш окурки.

117
00:10:56,600000 --> 00:10:59,540000
так что это отличный способ, которым ты можешь помочь нам прямо сейчас.

118
00:10:59,540000 --> 00:11:07,100000
да, еще один способ, которым ты можешь нам помочь, заключается в том, что у нас есть много стандартных библиотечных корешков, которые, как правило, содержат довольно полные аннотации.

119
00:11:07,100000 --> 00:11:11,770000
но в наших сторонних корешках есть множество параметров, которые не содержат никаких аннотаций.

120
00:11:12,070000 --> 00:11:21,700000
или помечены как неполные, что означает, что это псевдоним для любого из них, но это означает, что мы пока точно не знаем, что там должно быть, потому что мы еще не изучали это.

121
00:11:21,700000 --> 00:11:28,540000
так что, если у тебя есть желание ознакомиться с нашими заглушками и помочь улучшить наши сторонние заглушки, мы также будем очень рады.

122
00:11:28,540000 --> 00:11:33,580000
у меня есть очень специфический рабочий процесс поиска остановок, с которым ты можешь помочь.

123
00:11:33,580000 --> 00:11:40,650000
ты можешь просто нажать перейти к определению типа и найти остановки прямо перед собой в своей IDE.

124
00:11:40,710000 --> 00:11:47,730000
так ты сможешь увидеть, какие остановки заполнены аннотациями, а какие отсутствуют прямо сейчас.

125
00:11:47,870000 --> 00:11:49,120000
это действительно полезно.

126
00:11:49,120000 --> 00:11:50,690000
так что, пожалуйста, подумай о том, чтобы сделать это.

127
00:11:51,270000 --> 00:11:57,180000
я бы определенно рекомендовал использовать только очень маленькие рекламные объявления, пять или 10 строк приветствуются.

128
00:11:57,180000 --> 00:12:00,820000
нам очень легко их просмотреть, и мы, вероятно, просмотрим их очень быстро.

129
00:12:00,820000 --> 00:12:08,100000
если речь идет о рекламе в 1000 строк, то в конце концов мы дойдем до этого, но нам может потребоваться некоторое время, чтобы ознакомиться с ними, потому что мы довольно занятые люди.

130
00:12:08,100000 --> 00:12:11,900000
да, не бойся вносить свой вклад по частям.

131
00:12:11,900000 --> 00:12:16,940000
это так же хорошо, как и более крупные взносы, и в этом маленьком пиаре нет ничего постыдного.

132
00:12:16,940000 --> 00:12:19,240000
программа TypeShift очень удобна для начинающих.

133
00:12:19,240000 --> 00:12:23,040000
внести свой вклад очень просто, и я всячески поощряю это.

134
00:12:23,040000 --> 00:12:24,280000
да, я полностью согласен.

135
00:12:24,280000 --> 00:12:31,850000
я думаю, что мой первый PR состоял примерно из пяти измененных строк, как и мои первые 30 PR-сообщений.

136
00:12:32,430000 --> 00:12:32,920000
да.

137
00:12:32,920000 --> 00:12:40,060000
у меня только что возник еще один вопрос, потому что на самом деле существует две системы типов.

138
00:12:40,060000 --> 00:12:44,560000
одна предназначена для статических проверок, а другая - для среды выполнения Python.

139
00:12:44,560000 --> 00:12:47,450000
и я думаю, что мы пропустили часть времени выполнения.

140
00:12:47,470000 --> 00:12:53,570000
у тебя есть какие-нибудь идеи о том, какие шаги будут выполнены в этой части?

141
00:12:53,670000 --> 00:12:56,960000
какие проблемы существуют прямо сейчас и которые мы можем решить в будущем?

142
00:12:56,960000 --> 00:12:59,730000
а какие проблемы мы вообще не можем решить?

143
00:13:01,830000 --> 00:13:02,320000
конечно.

144
00:13:02,320000 --> 00:13:05,450000
тебя интересует Python 3.13 или 14?

145
00:13:07,870000 --> 00:13:09,930000
я думаю, мы можем обсудить их оба.

146
00:13:10,750000 --> 00:13:11,370000
хорошо.

147
00:13:11,910000 --> 00:13:26,980000
Python 3.13 - действительно захватывающий релиз, потому что у нас есть экспериментальный режим, в котором вы можете отключить GIL во время выполнения, что является глобальной блокировкой интерпретатора, которая предотвращает более одного

148
00:13:26,980000 --> 00:13:29,700000
в Python потоки выполняются одновременно.

149
00:13:29,700000 --> 00:13:37,170000
а еще у нас есть другой экспериментальный режим, который создает интерпретатор точно в срок.

150
00:13:37,230000 --> 00:13:47,290000
и вы также можете включить оба режима одновременно, если хотите, хотя они были созданы разными людьми и разными командами, но, тем не менее, они каким-то образом работают вместе.

151
00:13:48,590000 --> 00:13:52,820000
так что оба этих способа вряд ли значительно ускорят ваш код прямо сейчас.

152
00:13:52,820000 --> 00:14:00,080000
в версии Python без GIL отключено довольно много оптимизаций, потому что они еще не являются потокобезопасными.

153
00:14:00,080000 --> 00:14:12,440000
а интерпретатор just in time для другого варианта экспериментальной сборки очень новый и совсем не замедляет работу Python, но и пока не ускоряет ее.

154
00:14:12,440000 --> 00:14:19,170000
так что для них обоих вам, вероятно, придется подождать до версии Python 3.14, пока они не значительно ускорят ваш код, но теперь ты можешь поиграть с ними.

155
00:14:19,310000 --> 00:14:26,210000
вот что интересного ждет нас в версии Python 3.14, которая не является следующей версией Python, а будет выпущена после нее.

156
00:14:26,910000 --> 00:14:31,650000
мы надеемся, что у нас будет значительное ускорение как для однопоточного, так и для многопоточного кода.

157
00:14:31,910000 --> 00:14:46,940000
в версии Python 3.14, так что, я полагаю, мы получим PEP 649 не в том выпуске Python, который выйдет в октябре, а в том, который выйдет в 2025 году. оценили

158
00:14:46,940000 --> 00:14:49,780000
в Python по умолчанию используются аннотации.

159
00:14:49,780000 --> 00:15:04,880000
так что в настоящее время, если у вас есть функция, которая возвращает класс, а затем вы определяете этот класс позже в том же файле, или это метод этого класса, который возвращает сам себя, то при попытке ссылаться на него вы получите ошибку имени

160
00:15:04,880000 --> 00:15:10,540000
это класс, который еще не существует в возвращаемом типе этой функции или метода.

161
00:15:10,540000 --> 00:15:17,440000
и на данный момент вы можете обойти эту проблему, выполнив в верхней части вашего файла аннотации от done до future import.

162
00:15:17,440000 --> 00:15:21,610000
но проблема в том, что это превращает каждую аннотацию в вашем файле в строку.

163
00:15:21,950000 --> 00:15:32,770000
так что это нарушает работу инструментов, которые выполняют самоанализ аннотаций во время выполнения, таких как библиотека TypeGuard, TriCast, Pydantic или FastAPI.

164
00:15:33,070000 --> 00:15:36,480000
и эти инструменты стали действительно популярными за последние несколько лет.

165
00:15:36,480000 --> 00:15:42,560000
так что изначально планировалось, что аннотации импорта из будущего станут стандартными в Python 3.10.

166
00:15:42,560000 --> 00:15:48,000000
но потом этот план был отменен, потому что стало ясно, что это приведет к поломке всех этих инструментов.

167
00:15:48,000000 --> 00:15:50,690000
так что новый план заключается в том, чтобы, э-э, иметь.

168
00:15:50,710000 --> 00:16:00,730000
все аннотации должны быть объектами среды выполнения, такими же, как сейчас, но чтобы эти два объекта среды выполнения лениво оценивались по запросу используя дескрипторы.

169
00:16:01,070000 --> 00:16:12,610000
Это довольно сложное изменение для реализации, которое включает в себя множество изменений в компиляторе и модели данных Python, но, надеюсь, оно должно решить все проблемы. варианты использования.

170
00:16:12,790000 --> 00:16:20,210000
в настоящее время оно находится на полпути к реализации в CPython и должно появиться в Python 3.14.

171
00:16:20,630000 --> 00:16:25,370000
и этой работой занимается Jelle Zijlstra.

172
00:16:25,390000 --> 00:16:27,490000
я надеюсь, что правильно произнес его имя.

173
00:16:28,070000 --> 00:16:29,490000
да, я так думаю.

174
00:16:29,510000 --> 00:16:30,340000
я так думаю.

175
00:16:30,340000 --> 00:16:34,020000
но я несколько раз учился правильно произносить его имя.

176
00:16:34,020000 --> 00:16:34,650000
так что да.

177
00:16:35,030000 --> 00:16:35,650000
да.

178
00:16:36,390000 --> 00:16:47,640000
так вот, он еще один специалист по сопровождению модулей типизации в CPython, а также специалист по сопровождению typeshed, разработчик black, сопровождает MyPy и typing_extensions.

179
00:16:47,640000 --> 00:16:49,010000
так что он еще много чего делает.

180
00:16:49,230000 --> 00:16:50,600000
Он много чего делает.

181
00:16:50,600000 --> 00:17:00,370000
Он очень активен как в разработке ядра Python, так и в typing и в typing_extensions, потому что, насколько я помню, он является главным разработчиком typing_extensions.

182
00:17:00,550000 --> 00:17:09,400000
есть ли у тебя какие-нибудь другие примеры того, что будет улучшено в будущих версиях Python с учетом поддержки типов в runtime?

183
00:17:09,400000 --> 00:17:14,480000
Что мы можем улучшить в модуле inspect для интроспекции?

184
00:17:14,480000 --> 00:17:17,410000
О, inspect.signatures.

185
00:17:17,550000 --> 00:17:19,010000
это уже реализовано?

186
00:17:19,670000 --> 00:17:21,210000
работа продолжается.

187
00:17:21,510000 --> 00:17:22,130000
правильно.

188
00:17:22,990000 --> 00:17:23,420000
да.

189
00:17:23,420000 --> 00:17:37,820000
так вот, в настоящее время есть предложение Serhiy Storchaka, опять же, я надеюсь, что правильно произнес его имя, реализовать поддержку функций, которые имеют несколько сигнатур в Python.

190
00:17:37,820000 --> 00:17:41,900000
итак, мы уже поддерживаем их в системе статической типизации с помощью typing.

191
00:17:41,900000 --> 00:17:42,500000
это `@typing.overload`.

192
00:17:42,500000 --> 00:17:45,160000
но во время выполнения, если вы вызываете inspect.

193
00:17:45,160000 --> 00:17:50,410000
сингатура функции, то она всегда будет выдавать вам только одну сигнатуру для этой функции.

194
00:17:50,550000 --> 00:17:58,520000
и это часто бывает не очень точно, если у вас есть что-то вроде функции, с декоратором functools.

195
00:17:58,520000 --> 00:18:00,330000
singledispatch.

196
00:18:00,590000 --> 00:18:05,820000
или просто встроенная функция, такая как max или min, которую вы можете использовать самыми разными способами, с разными сигнатурами.

197
00:18:05,820000 --> 00:18:14,530000
если она будет реализована, то это предложение будет означать, что я не могу вспомнить, предлагалось ли возвращать объект с несколькими сигнатурами или список объектов с сигнатурами.

198
00:18:14,750000 --> 00:18:18,880000
довольно сложно разобраться, как именно это будет работать.

199
00:18:18,880000 --> 00:18:19,320000
да.

200
00:18:19,320000 --> 00:18:22,040000
так что посмотрим, произойдет ли это, но скрестим пальцы.

201
00:18:22,040000 --> 00:18:26,330000
я думаю, что это определенно лучше отразит семантику Python во время выполнения.

202
00:18:26,390000 --> 00:18:37,730000
я действительно надеюсь, что Python станет лучше справляться как со статическими проверками, так и с проверками во время выполнения, потому что и то, и другое очень важно для экосистемы и для разработчиков Python.

203
00:18:38,070000 --> 00:18:48,770000
Типизация действительно интересная, и я настоятельно рекомендую всем хотя бы попытаться внести свой вклад в typeshed и, возможно, в некоторые другие инструменты, такие как pyright, MyPy и CPython сам по себе.

204
00:18:49,070000 --> 00:18:52,850000
Алекс, большое спасибо, что пришел и ответил на мои вопросы.

205
00:18:53,390000 --> 00:19:01,450000
я думаю, что нашей аудитории будет чему поучиться у тебя.

206
00:19:01,510000 --> 00:19:05,180000
и мне было приятно видеть тебя здесь.

207
00:19:05,180000 --> 00:19:06,330000
так что спасибо.

208
00:19:06,990000 --> 00:19:08,260000
большое спасибо за то, что пригласил меня.

209
00:19:08,260000 --> 00:19:09,090000
это действительно весело.
